spring:
  application:
    name: fraud-detection
    server:
      port: 8080

  # Database connection
  datasource:
    url: jdbc:postgresql://localhost:5432/fraud-detection
    username: ${DB_USERNAME:postgres}
    password: ${DB_PASSWORD:postgres}
    driver-class-name: org.postgresql.Driver

# JPA Configuration
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgresPlusDialect
        format_sql: true

# Redis Configuration
  redis:
    host: ${REDIS_HOST:localhost}
    port: ${REDIS_PORT:6379}
    password: ${REDIS_PASSWORD:} # Optional, if your Redis server requires a password
    timeout: 2000ms # Connection timeout in milliseconds

# Kafka Configuration
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    producer:
      retries: 3
      batch-size: 16384
      buffer-memory: 33554432
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
    consumer:
      group-id: fraud-detection-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "*"

# cache
  cache:
    redis:
      time-to-live: 3600000 # 1 hour in ms

# Management
management:
  endpoints:
    web:
      exposure:
#        include: "*" # In dev only
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: always
  metrics:
    export:
      prometheus:
        enabled: true

# Logging
logging:
  level:
    com.frauddetection: INFO
    org.springframework.kafka: WARN
    org.hibernate.SQL: WARN